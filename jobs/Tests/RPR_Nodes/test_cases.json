[
    {
        "case": "BL28_MAT_NODE_001",
        "status": "active",
        "script_info": [
            "RPR Shader Blend weight map"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection1'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_002",
        "status": "active",
        "script_info": [
            "RPR Shader Blend without weight map"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection1'])",
            "material, node = get_material_and_node('Mix Shader', 'Mix Shader')",
            "material.node_tree.links.remove(material.node_tree.links.items()[11][1])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_003",
        "status": "active",
        "script_info": [
            "RPR Shader Blend, weight - 0"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection1'])",
            "material, node = get_material_and_node('Mix Shader', 'Mix Shader')",
            "material.node_tree.links.remove(material.node_tree.links.items()[11][1])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_004",
        "status": "active",
        "script_info": [
            "RPR Shader Blend, weight - 1"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection1'])",
            "material, node = get_material_and_node('Mix Shader', 'Mix Shader')",
            "material.node_tree.links.remove(material.node_tree.links.items()[11][1])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_005",
        "status": "active",
        "script_info": [],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_006",
        "status": "active",
        "script_info": [
            "Checker Texture scale - 1"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Checker Texture', 'Checker Texture')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_007",
        "status": "active",
        "script_info": [
            "Checker Texture scale - 5"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Checker Texture', 'Checker Texture')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_008",
        "status": "active",
        "script_info": [
            "Checker Texture scale - 10"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Checker Texture', 'Checker Texture')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_009",
        "status": "active",
        "script_info": [
            "Noise texture Scale - 1"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Noise Texture', 'Noise Texture')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_010",
        "status": "active",
        "script_info": [
            "Noise texture Scale - 5"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Noise Texture', 'Noise Texture')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_011",
        "status": "active",
        "script_info": [
            "Noise texture Scale - 10"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Noise Texture', 'Noise Texture')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_012",
        "status": "active",
        "script_info": [
            "Gradient Texture Blendig - Quadrantic"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Gradient Texture', 'Gradient Texture')",
            "set_value(node, 'gradient_type', 'QUADRATIC')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_013",
        "status": "active",
        "script_info": [
            "Gradient Texture Blendig - Linear "
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Gradient Texture', 'Gradient Texture')",
            "set_value(node, 'gradient_type', 'LINEAR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_014",
        "status": "active",
        "script_info": [
            "Gradient Texture Blendig - Easing "
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Gradient Texture', 'Gradient Texture')",
            "set_value(node, 'gradient_type', 'EASING')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_015",
        "status": "active",
        "script_info": [
            "Gradient Texture Blendig - Diagonal "
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Gradient Texture', 'Gradient Texture')",
            "set_value(node, 'gradient_type', 'DIAGONAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_016",
        "status": "active",
        "script_info": [
            "Gradient Texture Blendig - Spherical "
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Gradient Texture', 'Gradient Texture')",
            "set_value(node, 'gradient_type', 'SPHERICAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_017",
        "status": "active",
        "script_info": [
            "Gradient Texture Blendig - Quadrantic sphere"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Gradient Texture', 'Gradient Texture')",
            "set_value(node, 'gradient_type', 'QUADRATIC_SPHERE')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_018",
        "status": "active",
        "script_info": [
            "Gradient Texture Blendig - Radial"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection2'])",
            "material, node = get_material_and_node('Gradient Texture', 'Gradient Texture')",
            "set_value(node, 'gradient_type', 'RADIAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_019",
        "status": "active",
        "script_info": [],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_020",
        "status": "active",
        "script_info": [
            "Color Ramp \"Linear\" interpolation"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('Color Ramp', 'ColorRamp')",
            "set_value(node.color_ramp, 'interpolation', 'LINEAR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_021",
        "status": "active",
        "script_info": [
            "Color Ramp \"Ease\" interpolation"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('Color Ramp', 'ColorRamp')",
            "set_value(node.color_ramp, 'interpolation', 'EASE')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_022",
        "status": "active",
        "script_info": [
            "Color Ramp \"Cardinal\" interpolation"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('Color Ramp', 'ColorRamp')",
            "set_value(node.color_ramp, 'interpolation', 'CARDINAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_023",
        "status": "active",
        "script_info": [
            "Color Ramp \"B-Spline\" interpolation"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('Color Ramp', 'ColorRamp')",
            "set_value(node.color_ramp, 'interpolation', 'B_SPLINE')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_024",
        "status": "active",
        "script_info": [
            "Color Ramp \"Constant\" interpolation"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('Color Ramp', 'ColorRamp')",
            "set_value(node.color_ramp, 'interpolation', 'CONSTANT')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_025",
        "status": "active",
        "script_info": [
            "ColumnValueBlend, Value 1 - (0, 0, 0) (RGB), Value 2 - (1, 1, 1) (RGB)"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('Mix', 'Mix')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_026",
        "status": "active",
        "script_info": [
            "Operation - Abs"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'ABS')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_027",
        "status": "active",
        "script_info": [
            "Operation - Add"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'ADD')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_028",
        "status": "active",
        "script_info": [
            "Operation - Arccosine"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'ACOS')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_029",
        "status": "active",
        "script_info": [
            "Operation - Arcsine"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'ASIN')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_030",
        "status": "active",
        "script_info": [
            "Operation - Arctangent"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'ATAN')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_031",
        "status": "active",
        "script_info": [
            "Operation - Average"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'AVERAGE')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_032",
        "status": "active",
        "script_info": [
            "Operation - Average XYZ"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'AVERAGE_XYZ')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_033",
        "status": "active",
        "script_info": [
            "Operation - Combine"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'COMBINE')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_034",
        "status": "active",
        "script_info": [
            "Operation - Cosine"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'COS')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_035",
        "status": "active",
        "script_info": [
            "Operation - Cross Product"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'CROSS3')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_036",
        "status": "active",
        "script_info": [
            "Operation - Divide"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'DIV')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_037",
        "status": "active",
        "script_info": [
            "Operation - Dot3 Product"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'DOT3')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_038",
        "status": "active",
        "script_info": [
            "Operation - Dot4 Product"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'DOT4')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_039",
        "status": "active",
        "script_info": [
            "Operation - Floor"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'FLOOR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_040",
        "status": "active",
        "script_info": [
            "Operation - Length3"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'LENGTH3')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_041",
        "status": "active",
        "script_info": [
            "Operation - Log"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'LOG')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_042",
        "status": "active",
        "script_info": [
            "Operation - Max"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'MAX')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_043",
        "status": "active",
        "script_info": [
            "Operation - Min"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'MIN')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_044",
        "status": "active",
        "script_info": [
            "Operation - Mod"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'MOD')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_045",
        "status": "active",
        "script_info": [
            "Operation - Multiply"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'MUL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_046",
        "status": "active",
        "script_info": [
            "Operation - Normalize"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'NORMALIZE3')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_047",
        "status": "active",
        "script_info": [
            "Operation - Pow"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'POW')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_048",
        "status": "active",
        "script_info": [
            "Operation - Select W"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'SELECT_W')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_049",
        "status": "active",
        "script_info": [
            "Operation - Select X"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'SELECT_X')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_050",
        "status": "active",
        "script_info": [
            "Operation - Select Y"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'SELECT_Y')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_051",
        "status": "active",
        "script_info": [
            "Operation - Select Z"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'SELECT_Z')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_052",
        "status": "active",
        "script_info": [
            "Operation - Sine"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'SIN')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_053",
        "status": "active",
        "script_info": [
            "Operation - Subtract"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'SUB')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_054",
        "status": "active",
        "script_info": [
            "Operation - Tangent"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'TAN')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_055",
        "status": "active",
        "script_info": [
            "Operation - XYZW->WXYZ"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'SHUFFLE_WXYZ')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_056",
        "status": "active",
        "script_info": [
            "Operation - XYZW->YZWX"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'SHUFFLE_YZWX')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_057",
        "status": "active",
        "script_info": [
            "Operation - XYZW->ZWXY"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'operation', 'SHUFFLE_ZWXY')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_058",
        "status": "active",
        "script_info": [
            "Type - Float"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'display_type', 'FLOAT')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_059",
        "status": "active",
        "script_info": [
            "Type - Vector"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'display_type', 'VECTOR')",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection3'])",
            "material, node = get_material_and_node('RPRMath', 'RPR Math.001')",
            "set_value(node, 'display_type', 'VECTOR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_060",
        "status": "active",
        "script_info": [
            "Normal and Bump"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection4'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_061",
        "status": "active",
        "script_info": [
            "Texture Coordinates"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_062",
        "status": "active",
        "script_info": [
            "Generetad Texture Coordinates"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('Texture Coordinate', 'Mix')",
            "tree = material.node_tree",
            "material.node_tree.links.remove(material.node_tree.links.items()[3][1])",
            "texture_coordinate = [n for n in material.node_tree.nodes if n.name=='Texture Coordinate'][0]",
            "tree.links.new(texture_coordinate.outputs['Generated'], node.inputs['Fac'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_063",
        "status": "active",
        "script_info": [
            "Normal Texture Coordinates"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('Texture Coordinate', 'Mix')",
            "tree = material.node_tree",
            "material.node_tree.links.remove(material.node_tree.links.items()[3][1])",
            "texture_coordinate = [n for n in material.node_tree.nodes if n.name=='Texture Coordinate'][0]",
            "tree.links.new(texture_coordinate.outputs['Normal'], node.inputs['Fac'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_064",
        "status": "active",
        "script_info": [
            "UV Texture Coordinates"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('Texture Coordinate', 'Mix')",
            "tree = material.node_tree",
            "material.node_tree.links.remove(material.node_tree.links.items()[3][1])",
            "texture_coordinate = [n for n in material.node_tree.nodes if n.name=='Texture Coordinate'][0]",
            "tree.links.new(texture_coordinate.outputs['UV'], node.inputs['Fac'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_065",
        "status": "active",
        "script_info": [
            "Object Texture Coordinates"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('Texture Coordinate', 'Mix')",
            "tree = material.node_tree",
            "material.node_tree.links.remove(material.node_tree.links.items()[3][1])",
            "texture_coordinate = [n for n in material.node_tree.nodes if n.name=='Texture Coordinate'][0]",
            "tree.links.new(texture_coordinate.outputs['Object'], node.inputs['Fac'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_066",
        "status": "active",
        "script_info": [
            "Camera Texture Coordinates"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('Texture Coordinate', 'Mix')",
            "tree = material.node_tree",
            "material.node_tree.links.remove(material.node_tree.links.items()[3][1])",
            "texture_coordinate = [n for n in material.node_tree.nodes if n.name=='Texture Coordinate'][0]",
            "tree.links.new(texture_coordinate.outputs['Camera'], node.inputs['Fac'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_067",
        "status": "active",
        "script_info": [
            "Window Texture Coordinates"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('Texture Coordinate', 'Mix')",
            "tree = material.node_tree",
            "material.node_tree.links.remove(material.node_tree.links.items()[3][1])",
            "texture_coordinate = [n for n in material.node_tree.nodes if n.name=='Texture Coordinate'][0]",
            "tree.links.new(texture_coordinate.outputs['Window'], node.inputs['Fac'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_068",
        "status": "active",
        "script_info": [
            "Fresnel - 1"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('Fresnel', 'Fresnel')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_069",
        "status": "active",
        "script_info": [
            "Fresnel - 1.5"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('Fresnel', 'Fresnel')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_070",
        "status": "active",
        "script_info": [
            "Fresnel - 3"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('Fresnel', 'Fresnel')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_071",
        "status": "active",
        "script_info": [
            "RPR Lookup node, Type - UV"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('LookUp', 'RPR Lookup')",
            "set_value(node, 'lookup_type', 'UV')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_072",
        "status": "active",
        "script_info": [
            "RPR Lookup node, Type - Normal"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('LookUp', 'RPR Lookup')",
            "set_value(node, 'lookup_type', 'NORMAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_073",
        "status": "active",
        "script_info": [
            "RPR Lookup node, Type - Position"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('LookUp', 'RPR Lookup')",
            "set_value(node, 'lookup_type', 'POS')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_074",
        "status": "active",
        "script_info": [
            "RPR Lookup node, Type - InVec"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('LookUp', 'RPR Lookup')",
            "set_value(node, 'lookup_type', 'INVEC')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_075",
        "status": "active",
        "script_info": [
            "RPR Lookup node, Type - UV1"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('LookUp', 'RPR Lookup')",
            "set_value(node, 'lookup_type', 'UV1')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_076",
        "status": "active",
        "script_info": [
            "RPR Lookup node, Type - Object Position"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('LookUp', 'RPR Lookup')",
            "set_value(node, 'lookup_type', 'P_LOCAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_077",
        "status": "active",
        "script_info": [
            "RPR Lookup node, Type - Vertex Color"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection5'])",
            "material, node = get_material_and_node('LookUp', 'RPR Lookup')",
            "set_value(node, 'lookup_type', 'VERTEX_COLOR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_078",
        "status": "active",
        "script_info": [
            "Shadow Catcher"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection6'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_079",
        "status": "skipped",
        "script_info": [
            "RPR Fresnel Schlick, RPR Fresnel"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_080",
        "status": "skipped",
        "script_info": [
            "RPR Fresnel Schlick node, Reflectance - 0.5"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_081",
        "status": "skipped",
        "script_info": [
            "RPR Fresnel Schlick node, Reflectance - 1"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_082",
        "status": "skipped",
        "script_info": [
            "RPR Fresnel node, IOR - 0"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_083",
        "status": "skipped",
        "script_info": [
            "RPR Fresnel node, IOR - 1"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_084",
        "status": "skipped",
        "script_info": [
            "RPR Fresnel node, IOR - 3"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_085",
        "status": "active",
        "script_info": [
            "RPR Passthrough Node"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection7'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_086",
        "status": "active",
        "script_info": [
            "RPR Procedural UV, Type - Plane"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection7'])",
            "material, node = get_material_and_node('RPRProceduralUV', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_PLANAR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_087",
        "status": "active",
        "script_info": [
            "RPR Procedural UV, Type - Cylinder"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection7'])",
            "material, node = get_material_and_node('RPRProceduralUV', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_CYLINDICAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_088",
        "status": "active",
        "script_info": [
            "RPR Procedural UV, Type - Sphere"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection7'])",
            "material, node = get_material_and_node('RPRProceduralUV', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_SPHERICAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_089",
        "status": "active",
        "script_info": [
            "RPR Procedural UV, Type - Camera"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection7'])",
            "material, node = get_material_and_node('RPRProceduralUV', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_PROJECT')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_090",
        "status": "active",
        "script_info": [
            "RPR Procedural UV, Type - Tryplanar"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection7'])",
            "material, node = get_material_and_node('RPRProceduralUV', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'TRIPLANAR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_091",
        "status": "active",
        "script_info": [
            "Displacement"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection8'])",
            "material, node = get_material_and_node('RPRDisplasement', 'Displacement')",
            "material.cycles['displacement_method'] = 1",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_092",
        "status": "active",
        "script_info": [
            "Displacement , Midlevel: - 0"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection8'])",
            "material, node = get_material_and_node('RPRDisplasement', 'Displacement')",
            "material.cycles['displacement_method'] = 1",
            "set_value(node.inputs['Midlevel'], 'default_value', 0)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_093",
        "status": "active",
        "script_info": [
            "Displacement , Midlevel: - 1"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection8'])",
            "material, node = get_material_and_node('RPRDisplasement', 'Displacement')",
            "material.cycles['displacement_method'] = 1",
            "set_value(node.inputs['Midlevel'], 'default_value', 1)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_094",
        "status": "active",
        "script_info": [
            "Displacement , Scale: - 0"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection8'])",
            "material, node = get_material_and_node('RPRDisplasement', 'Displacement')",
            "material.cycles['displacement_method'] = 1",
            "set_value(node.inputs['Midlevel'], 'default_value', 0.5)",
            "set_value(node.inputs['Scale'], 'default_value', 0)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_095",
        "status": "active",
        "script_info": [
            "Displacement , Scale: - 1"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection8'])",
            "material, node = get_material_and_node('RPRDisplasement', 'Displacement')",
            "material.cycles['displacement_method'] = 1",
            "set_value(node.inputs['Midlevel'], 'default_value', 0.5)",
            "set_value(node.inputs['Scale'], 'default_value', 1)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_096",
        "status": "active",
        "script_info": [
            "Displacement , Scale: - 2"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection8'])",
            "material, node = get_material_and_node('RPRDisplasement', 'Displacement')",
            "material.cycles['displacement_method'] = 1",
            "set_value(node.inputs['Midlevel'], 'default_value', 0.5)",
            "set_value(node.inputs['Scale'], 'default_value', 2)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_097",
        "status": "active",
        "script_info": [
            "Displacement , Normal"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection8'])",
            "material, node = get_material_and_node('RPRDisplasement', 'Displacement')",
            "material.cycles['displacement_method'] = 1",
            "set_value(node.inputs['Midlevel'], 'default_value', 0.5)",
            "set_value(node.inputs['Scale'], 'default_value', 1)",
            "material.node_tree.links.remove(node.inputs['Height'].links[0])",
            "node_imagemap = [n for n in material.node_tree.nodes if n.name== 'Image Texture.002'][0]",
            "material.node_tree.links.new(node_imagemap.outputs['Color'], node.inputs['Normal'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_098",
        "status": "active",
        "script_info": [
            "Displacement , World Space"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection8'])",
            "material, node = get_material_and_node('RPRProceduralUV', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_PROJECT')",
            "set_value(node.inputs['Midlevel'], 'default_value', 0.5)",
            "set_value(node.inputs['Scale'], 'default_value', 1)",
            "set_value(node, 'space', 'WORLD')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_099",
        "status": "skipped",
        "script_info": [],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_100",
        "status": "skipped",
        "script_info": [
            "RPR Transparent node, Diffuse Color - (1, 0.5, 0)"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_101",
        "status": "active",
        "script_info": [
            "Blender Nodes"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection10'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_102",
        "status": "active",
        "script_info": [
            "Volume + Layered materials"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_103",
        "status": "active",
        "script_info": [
            "Volume Color"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRVolume', 'Principled Volume')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_104",
        "status": "active",
        "script_info": [
            "Layer Shader Triplanar"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRLayeredShader', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'TRIPLANAR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_105",
        "status": "active",
        "script_info": [
            "Layer Shader Plane"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRLayeredShader', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_PLANAR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_106",
        "status": "active",
        "script_info": [
            "Layer Shader Cilinder"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRLayeredShader', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_CYLINDICAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_107",
        "status": "active",
        "script_info": [
            "Layer Shader Sphere"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRLayeredShader', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_SPHERICAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_108",
        "status": "active",
        "script_info": [
            "Layer Shader Camera"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRLayeredShader', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_PROJECT')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_109",
        "status": "active",
        "script_info": [
            "Layer Shader Triplanar"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRLayered Texture', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'TRIPLANAR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_110",
        "status": "active",
        "script_info": [
            "Layer Shader Plane"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRLayered Texture', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_PLANAR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_111",
        "status": "active",
        "script_info": [
            "Layer Shader Cilinder"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRLayered Texture', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_CYLINDICAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_112",
        "status": "active",
        "script_info": [
            "Layer Shader Sphere"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRLayered Texture', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_SPHERICAL')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_113",
        "status": "active",
        "script_info": [
            "Layer Shader Camera"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection9'])",
            "material, node = get_material_and_node('RPRLayeredShader', 'RPR Procedural UV')",
            "set_value(node, 'procedural_type', 'MATERIAL_NODE_UVTYPE_PROJECT')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_114",
        "status": "active",
        "script_info": [
            "Operation - Add, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'ADD')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_115",
        "status": "active",
        "script_info": [
            "Operation - Add, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'ADD')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_116",
        "status": "active",
        "script_info": [
            "Operation - Subtract, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'SUBTRACT')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_117",
        "status": "active",
        "script_info": [
            "Operation - Subtract, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'SUBTRACT')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_118",
        "status": "active",
        "script_info": [
            "Operation - Multiply, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'MULTIPLY')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_119",
        "status": "active",
        "script_info": [
            "Operation - Multiply, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'MULTIPLY')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_120",
        "status": "active",
        "script_info": [
            "Operation - Divide, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'DIVIDE')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_121",
        "status": "active",
        "script_info": [
            "Operation - Divide, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'DIVIDE')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_122",
        "status": "active",
        "script_info": [
            "Operation - Cross Production, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'CROSS_PRODUCT')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_123",
        "status": "active",
        "script_info": [
            "Operation - Cross Production, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'CROSS_PRODUCT')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_124",
        "status": "active",
        "script_info": [
            "Operation - Project, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'PROJECT')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_125",
        "status": "active",
        "script_info": [
            "Operation - Project, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'PROJECT')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_126",
        "status": "active",
        "script_info": [
            "Operation - Reflect, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'REFLECT')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_127",
        "status": "active",
        "script_info": [
            "Operation - Reflect, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'REFLECT')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_128",
        "status": "active",
        "script_info": [
            "Operation - Dot Production, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'DOT_PRODUCT')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_129",
        "status": "active",
        "script_info": [
            "Operation - Dot Production, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'DOT_PRODUCT')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_130",
        "status": "active",
        "script_info": [
            "Operation - Distance, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'DISTANCE')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_131",
        "status": "active",
        "script_info": [
            "Operation - Distance, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'DISTANCE')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_132",
        "status": "active",
        "script_info": [
            "Operation - Length"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'LENGTH')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_133",
        "status": "active",
        "script_info": [
            "Operation - Scale, Value: 0.5"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'SCALE')",
            "set_value(node.inputs['Scale'], 'default_value', 0.5)",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_134",
        "status": "active",
        "script_info": [
            "Operation - Scale, Value: 1"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'SCALE')",
            "set_value(node.inputs['Scale'], 'default_value', 1)",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_135",
        "status": "active",
        "script_info": [
            "Operation - Normalize"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'NORMALIZE')",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_136",
        "status": "active",
        "script_info": [
            "Operation - Snap, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'SNAP')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_137",
        "status": "active",
        "script_info": [
            "Operation - Snap, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'SNAP')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_138",
        "status": "active",
        "script_info": [
            "Operation - Floor"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'FLOOR')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_139",
        "status": "active",
        "script_info": [
            "Operation - Ceil"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'CEIL')",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_140",
        "status": "active",
        "script_info": [
            "Operation - Modulo, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'MODULO')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ],
        "skip_engine": [
            "LOW", "MEDIUM", "HIGH"
        ]
    },
    {
        "case": "BL28_MAT_NODE_141",
        "status": "active",
        "script_info": [
            "Operation - Modulo, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'MODULO')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ],
        "skip_engine": [
            "LOW", "MEDIUM", "HIGH"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_142",
        "status": "active",
        "script_info": [
            "Operation - Fraction"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'FRACTION')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_143",
        "status": "active",
        "script_info": [
            "Operation - Absolute"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'ABSOLUTE')",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_144",
        "status": "active",
        "script_info": [
            "Operation - Minimum, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'MINIMUM')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_145",
        "status": "active",
        "script_info": [
            "Operation - Minimum, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'MINIMUM')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_146",
        "status": "active",
        "script_info": [
            "Operation - Maximum, Value: 0;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'MAXIMUM')",
            "set_value(node.inputs[1], 'default_value', (0, 0.5, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_147",
        "status": "active",
        "script_info": [
            "Operation - Maximum, Value: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'MAXIMUM')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_148",
        "status": "active",
        "script_info": [
            "Operation - Sine"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'SINE')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_149",
        "status": "active",
        "script_info": [
            "Operation - Cosine"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'COSINE')",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_150",
        "status": "active",
        "script_info": [
            "Operation - Tangent"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'TANGENT')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_151",
        "status": "active",
        "script_info": [
            "Operation - Wrap, Value 1: 0.5;0.5;0, Value 2: 0.5;0.5;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'WRAP')",
            "set_value(node.inputs[1], 'default_value', (0.5, 0.5, 0))",
            "set_value(node.inputs[2], 'default_value', (0.5, 0.5, 0))",
            "rpr_render(case)"
        ]
    },   
    {
        "case": "BL28_MAT_NODE_152",
        "status": "active",
        "script_info": [
            "Operation - Wrap, Value 1: 0.1;0.1;0, Value 2: 0.7;0.7;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'WRAP')",
            "set_value(node.inputs[1], 'default_value', (0.1, 0.1, 0))",
            "set_value(node.inputs[2], 'default_value', (0.7, 0.7, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_153",
        "status": "active",
        "script_info": [
            "Operation - Wrap, Value 1: 0.6;0.2;0, Value 2: 0.4;0.4;0"
        ],
        "scene": "RPR_Nodes1.blend",
        "functions": [
            "set_value(scene.render, 'use_single_layer', True)",
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "material, node = get_material_and_node('Vector Math', 'Vector Math')",
            "set_value(node, 'operation', 'WRAP')",
            "set_value(node.inputs[1], 'default_value', (0.6, 0.2, 0))",
            "set_value(node.inputs[2], 'default_value', (0.4, 0.4, 0))",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_154",
        "status": "active",
        "script_info": [
            "Object Info - Location"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "connect_output('Object_Info_Node', 'ColorRamp', 'Object Info', 'Fac', 'Location')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_155",
        "status": "active",
        "script_info": [
            "Object Info - Color"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "connect_output('Object_Info_Node', 'ColorRamp', 'Object Info', 'Fac', 'Color')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_156",
        "status": "active",
        "script_info": [
            "Object Info - Object Index"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "connect_output('Object_Info_Node', 'ColorRamp', 'Object Info', 'Fac', 'Object Index')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_157",
        "status": "active",
        "script_info": [
            "Object Info - Material Index"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "connect_output('Object_Info_Node', 'ColorRamp', 'Object Info', 'Fac', 'Material Index')",
            "rpr_render(case)"
        ]
    },
    {
        "case": "BL28_MAT_NODE_158",
        "status": "active",
        "script_info": [
            "Object Info - Random"
        ],
        "scene": "RPR_Nodes.blend",
        "functions": [
            "set_value(bpy.context.window, 'view_layer', bpy.data.scenes['Scene'].view_layers['Collection11'])",
            "connect_output('Object_Info_Node', 'ColorRamp', 'Object Info', 'Fac', 'Random')",
            "rpr_render(case)"
        ]
    }
]
